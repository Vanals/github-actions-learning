# The permissions specified in the workflow configuration only apply to actions and scripts executed within the GitHub Actions workflow itself.
# They do not affect direct interactions with the repository, such as using git push from your local development environment.
# permissions:
#   contents: read # Read-only access to the repository's content

# Workflow name. Optional,, if ommited the file name will be used instead.
name: learn-github-actions
# More descripting worjflow name - shown in bigger in the actions UI
run-name: ${{ github.actor }} is learning GitHub Actions

# Setting env variables available for all the job of this workflow?
env:
  SERVER: production


# Use defaults to create a map of default settings that will apply to all jobs in the workflow.
# NOT really sure what keys can be set other than "run" for setting working directory.
# defaults: 
  
   

# ---
# workflow triggered when pushing code to a branch
on: [push]

#You can also configure it to ron on push only on specific branches, tags etc.
#on.push.<branches|tags|branches-ignore|tags-ignore>
# on: 
#   push:
#     branches:

## You can also specify a path, to only run the workflow when files in that path have changed

# ---

# Event triggering the workflow when a pull request is created.
# on: [pull_request]
# This trigger is used when you want to run a workflow on the repository where the pull request is being merged into 
# on: [pull_request_target]

#both can specify branch or branches ignore.
# E.G
# on:
#   pull_request:
#     # Sequence of patterns matched against refs/heads
#     branches:  

# You can also specify a path, to only run the workflow when files in that path have changed
# --
# on.schedule
# ...
# Use on.workflow_call to define the inputs and outputs for a reusable workflow. 
# on.workflow_call 
# ...
# on.workflow_run Like on workflow_call but you can specify in which branches the workflow must be called from
# ...
# workflow dispatch stops the workflow to run automatically. Allows you to trigger the workfloe manually
# and allso to chose in which branch you want to run the code into?
# on: [workflow_dispatch]
# ...




# Checks if any concurrent jobs under the same pull request or branch are being executed
concurrency:
  # Can be set using github variables
  group: 'marco' 
  # if they do, i cancel the one in progress priotising the new one
  cancel-in-progress: true


# Workflow's jobs
jobs:
  # TODO can I do checkout on a separated job and pass repo down?
  # TODO can I avoid having to re install dependencies in different jobs, cos actions do it under the hood?
  # checkout:
  #   runs-on: ubuntu-latest
  #   steps:
  #     # ACTIONS are basically orbs. So a set of steps that can be shared withing a community. And be also versioned
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '14'

  # Workflow's job
  check-bats-version:
    name: "Check Bats job Name"
    # Job's config
    runs-on: ubuntu-latest
    steps:
      # ACTIONS are basically orbs. So a set of steps that can be shared withing a community. And be also versioned
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - run: npm install -g bats
      - run: bats -v
      - run: echo $SERVER
  
  test:
    runs-on: ubuntu-latest
    needs: check-bats-version
    steps:
      - run: echo "$github.base_ref"
      - run: echo ${{ github.base_ref}}
      - run: echo ${{ github.event }}
  
  test-cy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Install NPM dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v6.1.0
        with:
          build: npm run build
          start: npm start



# TODO MULTIPLE TESTS FOR CYPRESS AND PARALLELIZE THEM USING MATRIX